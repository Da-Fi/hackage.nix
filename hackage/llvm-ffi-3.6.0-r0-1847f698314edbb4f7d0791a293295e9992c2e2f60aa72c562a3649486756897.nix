{ system, compiler, flags, pkgs, hsPkgs, pkgconfPkgs, ... }:
  {
    flags = {
      developer = false;
      buildexamples = false;
      specificpkgconfig = true;
      llvm304 = false;
      llvm305 = false;
      };
    package = {
      specVersion = "1.8";
      identifier = { name = "llvm-ffi"; version = "3.6.0"; };
      license = "BSD-3-Clause";
      copyright = "";
      maintainer = "Henning Thielemann <llvm@henning-thielemann.de>";
      author = "Henning Thielemann, Bryan O'Sullivan, Lennart Augustsson";
      homepage = "http://haskell.org/haskellwiki/LLVM";
      url = "";
      synopsis = "FFI bindings to the LLVM compiler toolkit.";
      description = "FFI bindings to the LLVM compiler toolkit.\n\nInstallation is based on @pkg-config@\nsince this is best supported by Cabal.\nThis requires an @llvm.pc@ file\nwhich unfortunately is not generated by the LLVM source package.\nYou may be lucky that your distribution package includes that file.\nIf not, you can generate it yourself\nusing the @llvm-pkg-config@ package.\n\nWe try to stay up to date with LLVM releases.\nThe current version of this package is compatible with LLVM 3.4-3.6.\nPlease understand that the package may or may not work\nagainst older LLVM releases.";
      buildType = "Simple";
      };
    components = {
      "library" = {
        depends = [
          (hsPkgs."enumset" or ((hsPkgs.pkgs-errors).buildDepError "enumset"))
          (hsPkgs."base" or ((hsPkgs.pkgs-errors).buildDepError "base"))
          ];
        pkgconfig = if flags.llvm304
          then if flags.specificpkgconfig
            then [
              (pkgconfPkgs."llvm-3.4" or ((hsPkgs.pkgs-errors).pkgConfDepError "llvm-3.4"))
              ]
            else [
              (pkgconfPkgs."llvm" or ((hsPkgs.pkgs-errors).pkgConfDepError "llvm"))
              ]
          else if flags.llvm305
            then if flags.specificpkgconfig
              then [
                (pkgconfPkgs."llvm-3.5" or ((hsPkgs.pkgs-errors).pkgConfDepError "llvm-3.5"))
                ]
              else [
                (pkgconfPkgs."llvm" or ((hsPkgs.pkgs-errors).pkgConfDepError "llvm"))
                ]
            else if flags.specificpkgconfig
              then [
                (pkgconfPkgs."llvm-3.6" or ((hsPkgs.pkgs-errors).pkgConfDepError "llvm-3.6"))
                ]
              else [
                (pkgconfPkgs."llvm" or ((hsPkgs.pkgs-errors).pkgConfDepError "llvm"))
                ];
        buildable = true;
        };
      exes = {
        "llvm-ffi-example" = {
          depends = (pkgs.lib).optionals (flags.buildexamples) [
            (hsPkgs."llvm-ffi" or ((hsPkgs.pkgs-errors).buildDepError "llvm-ffi"))
            (hsPkgs."utility-ht" or ((hsPkgs.pkgs-errors).buildDepError "utility-ht"))
            (hsPkgs."base" or ((hsPkgs.pkgs-errors).buildDepError "base"))
            ];
          buildable = if flags.buildexamples then true else false;
          };
        };
      };
    }