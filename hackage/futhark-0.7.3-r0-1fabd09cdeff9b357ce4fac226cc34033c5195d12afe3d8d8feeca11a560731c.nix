{ system, compiler, flags, pkgs, hsPkgs, pkgconfPkgs, ... }:
  {
    flags = {};
    package = {
      specVersion = "1.10";
      identifier = { name = "futhark"; version = "0.7.3"; };
      license = "ISC";
      copyright = "";
      maintainer = "Troels Henriksen athas@sigkill.dk";
      author = "";
      homepage = "https://futhark-lang.org";
      url = "";
      synopsis = "An optimising compiler for a functional, array-oriented language.";
      description = "See the website at https://futhark-lang.org";
      buildType = "Simple";
      };
    components = {
      "library" = {
        depends = [
          (hsPkgs.ansi-terminal)
          (hsPkgs.array)
          (hsPkgs.base)
          (hsPkgs.bifunctors)
          (hsPkgs.binary)
          (hsPkgs.blaze-html)
          (hsPkgs.bytestring)
          (hsPkgs.containers)
          (hsPkgs.data-binary-ieee754)
          (hsPkgs.directory)
          (hsPkgs.directory-tree)
          (hsPkgs.dlist)
          (hsPkgs.extra)
          (hsPkgs.file-embed)
          (hsPkgs.filepath)
          (hsPkgs.free)
          (hsPkgs.gitrev)
          (hsPkgs.http-client)
          (hsPkgs.http-client-tls)
          (hsPkgs.http-conduit)
          (hsPkgs.language-c-quote)
          (hsPkgs.mainland-pretty)
          (hsPkgs.markdown)
          (hsPkgs.megaparsec)
          (hsPkgs.mtl)
          (hsPkgs.neat-interpolation)
          (hsPkgs.parallel)
          (hsPkgs.parser-combinators)
          (hsPkgs.process)
          (hsPkgs.process-extras)
          (hsPkgs.raw-strings-qq)
          (hsPkgs.regex-tdfa)
          (hsPkgs.srcloc)
          (hsPkgs.template-haskell)
          (hsPkgs.text)
          (hsPkgs.th-lift-instances)
          (hsPkgs.time)
          (hsPkgs.transformers)
          (hsPkgs.vector)
          (hsPkgs.vector-binary-instances)
          (hsPkgs.versions)
          (hsPkgs.zip-archive)
          (hsPkgs.zlib)
          ] ++ (pkgs.lib).optional (!(compiler.isGhc && (compiler.version).ge "8.0")) (hsPkgs.semigroups);
        build-tools = [
          (hsPkgs.buildPackages.alex or (pkgs.buildPackages.alex))
          (hsPkgs.buildPackages.happy or (pkgs.buildPackages.happy))
          ];
        };
      exes = {
        "futhark" = {
          depends = [
            (hsPkgs.ansi-terminal)
            (hsPkgs.array)
            (hsPkgs.base)
            (hsPkgs.bifunctors)
            (hsPkgs.binary)
            (hsPkgs.blaze-html)
            (hsPkgs.bytestring)
            (hsPkgs.containers)
            (hsPkgs.data-binary-ieee754)
            (hsPkgs.directory)
            (hsPkgs.directory-tree)
            (hsPkgs.dlist)
            (hsPkgs.extra)
            (hsPkgs.file-embed)
            (hsPkgs.filepath)
            (hsPkgs.free)
            (hsPkgs.futhark)
            (hsPkgs.gitrev)
            (hsPkgs.http-client)
            (hsPkgs.http-client-tls)
            (hsPkgs.http-conduit)
            (hsPkgs.json)
            (hsPkgs.language-c-quote)
            (hsPkgs.mainland-pretty)
            (hsPkgs.markdown)
            (hsPkgs.megaparsec)
            (hsPkgs.mtl)
            (hsPkgs.neat-interpolation)
            (hsPkgs.parallel)
            (hsPkgs.parser-combinators)
            (hsPkgs.process)
            (hsPkgs.process-extras)
            (hsPkgs.random)
            (hsPkgs.raw-strings-qq)
            (hsPkgs.regex-tdfa)
            (hsPkgs.srcloc)
            (hsPkgs.template-haskell)
            (hsPkgs.temporary)
            (hsPkgs.text)
            (hsPkgs.th-lift-instances)
            (hsPkgs.time)
            (hsPkgs.transformers)
            (hsPkgs.vector)
            (hsPkgs.vector-binary-instances)
            (hsPkgs.versions)
            (hsPkgs.zip-archive)
            (hsPkgs.zlib)
            ] ++ (pkgs.lib).optional (!(compiler.isGhc && (compiler.version).ge "8.0")) (hsPkgs.semigroups);
          };
        "futhark-bench" = {
          depends = [
            (hsPkgs.ansi-terminal)
            (hsPkgs.array)
            (hsPkgs.base)
            (hsPkgs.bifunctors)
            (hsPkgs.binary)
            (hsPkgs.blaze-html)
            (hsPkgs.bytestring)
            (hsPkgs.containers)
            (hsPkgs.data-binary-ieee754)
            (hsPkgs.directory)
            (hsPkgs.directory-tree)
            (hsPkgs.dlist)
            (hsPkgs.extra)
            (hsPkgs.file-embed)
            (hsPkgs.filepath)
            (hsPkgs.free)
            (hsPkgs.futhark)
            (hsPkgs.gitrev)
            (hsPkgs.http-client)
            (hsPkgs.http-client-tls)
            (hsPkgs.http-conduit)
            (hsPkgs.json)
            (hsPkgs.language-c-quote)
            (hsPkgs.mainland-pretty)
            (hsPkgs.markdown)
            (hsPkgs.megaparsec)
            (hsPkgs.mtl)
            (hsPkgs.neat-interpolation)
            (hsPkgs.parallel)
            (hsPkgs.parser-combinators)
            (hsPkgs.process)
            (hsPkgs.process-extras)
            (hsPkgs.random)
            (hsPkgs.raw-strings-qq)
            (hsPkgs.regex-tdfa)
            (hsPkgs.srcloc)
            (hsPkgs.template-haskell)
            (hsPkgs.temporary)
            (hsPkgs.text)
            (hsPkgs.th-lift-instances)
            (hsPkgs.time)
            (hsPkgs.transformers)
            (hsPkgs.vector)
            (hsPkgs.vector-binary-instances)
            (hsPkgs.versions)
            (hsPkgs.zip-archive)
            (hsPkgs.zlib)
            ] ++ (pkgs.lib).optional (!(compiler.isGhc && (compiler.version).ge "8.0")) (hsPkgs.semigroups);
          };
        "futhark-c" = {
          depends = [
            (hsPkgs.ansi-terminal)
            (hsPkgs.array)
            (hsPkgs.base)
            (hsPkgs.bifunctors)
            (hsPkgs.binary)
            (hsPkgs.blaze-html)
            (hsPkgs.bytestring)
            (hsPkgs.containers)
            (hsPkgs.data-binary-ieee754)
            (hsPkgs.directory)
            (hsPkgs.directory-tree)
            (hsPkgs.dlist)
            (hsPkgs.extra)
            (hsPkgs.file-embed)
            (hsPkgs.filepath)
            (hsPkgs.free)
            (hsPkgs.futhark)
            (hsPkgs.gitrev)
            (hsPkgs.http-client)
            (hsPkgs.http-client-tls)
            (hsPkgs.http-conduit)
            (hsPkgs.json)
            (hsPkgs.language-c-quote)
            (hsPkgs.mainland-pretty)
            (hsPkgs.markdown)
            (hsPkgs.megaparsec)
            (hsPkgs.mtl)
            (hsPkgs.neat-interpolation)
            (hsPkgs.parallel)
            (hsPkgs.parser-combinators)
            (hsPkgs.process)
            (hsPkgs.process-extras)
            (hsPkgs.random)
            (hsPkgs.raw-strings-qq)
            (hsPkgs.regex-tdfa)
            (hsPkgs.srcloc)
            (hsPkgs.template-haskell)
            (hsPkgs.temporary)
            (hsPkgs.text)
            (hsPkgs.th-lift-instances)
            (hsPkgs.time)
            (hsPkgs.transformers)
            (hsPkgs.vector)
            (hsPkgs.vector-binary-instances)
            (hsPkgs.versions)
            (hsPkgs.zip-archive)
            (hsPkgs.zlib)
            ] ++ (pkgs.lib).optional (!(compiler.isGhc && (compiler.version).ge "8.0")) (hsPkgs.semigroups);
          };
        "futhark-cs" = {
          depends = [
            (hsPkgs.ansi-terminal)
            (hsPkgs.array)
            (hsPkgs.base)
            (hsPkgs.bifunctors)
            (hsPkgs.binary)
            (hsPkgs.blaze-html)
            (hsPkgs.bytestring)
            (hsPkgs.containers)
            (hsPkgs.data-binary-ieee754)
            (hsPkgs.directory)
            (hsPkgs.directory-tree)
            (hsPkgs.dlist)
            (hsPkgs.extra)
            (hsPkgs.file-embed)
            (hsPkgs.filepath)
            (hsPkgs.free)
            (hsPkgs.futhark)
            (hsPkgs.gitrev)
            (hsPkgs.http-client)
            (hsPkgs.http-client-tls)
            (hsPkgs.http-conduit)
            (hsPkgs.json)
            (hsPkgs.language-c-quote)
            (hsPkgs.mainland-pretty)
            (hsPkgs.markdown)
            (hsPkgs.megaparsec)
            (hsPkgs.mtl)
            (hsPkgs.neat-interpolation)
            (hsPkgs.parallel)
            (hsPkgs.parser-combinators)
            (hsPkgs.process)
            (hsPkgs.process-extras)
            (hsPkgs.random)
            (hsPkgs.raw-strings-qq)
            (hsPkgs.regex-tdfa)
            (hsPkgs.srcloc)
            (hsPkgs.template-haskell)
            (hsPkgs.temporary)
            (hsPkgs.text)
            (hsPkgs.th-lift-instances)
            (hsPkgs.time)
            (hsPkgs.transformers)
            (hsPkgs.vector)
            (hsPkgs.vector-binary-instances)
            (hsPkgs.versions)
            (hsPkgs.zip-archive)
            (hsPkgs.zlib)
            ] ++ (pkgs.lib).optional (!(compiler.isGhc && (compiler.version).ge "8.0")) (hsPkgs.semigroups);
          };
        "futhark-csopencl" = {
          depends = [
            (hsPkgs.ansi-terminal)
            (hsPkgs.array)
            (hsPkgs.base)
            (hsPkgs.bifunctors)
            (hsPkgs.binary)
            (hsPkgs.blaze-html)
            (hsPkgs.bytestring)
            (hsPkgs.containers)
            (hsPkgs.data-binary-ieee754)
            (hsPkgs.directory)
            (hsPkgs.directory-tree)
            (hsPkgs.dlist)
            (hsPkgs.extra)
            (hsPkgs.file-embed)
            (hsPkgs.filepath)
            (hsPkgs.free)
            (hsPkgs.futhark)
            (hsPkgs.gitrev)
            (hsPkgs.http-client)
            (hsPkgs.http-client-tls)
            (hsPkgs.http-conduit)
            (hsPkgs.json)
            (hsPkgs.language-c-quote)
            (hsPkgs.mainland-pretty)
            (hsPkgs.markdown)
            (hsPkgs.megaparsec)
            (hsPkgs.mtl)
            (hsPkgs.neat-interpolation)
            (hsPkgs.parallel)
            (hsPkgs.parser-combinators)
            (hsPkgs.process)
            (hsPkgs.process-extras)
            (hsPkgs.random)
            (hsPkgs.raw-strings-qq)
            (hsPkgs.regex-tdfa)
            (hsPkgs.srcloc)
            (hsPkgs.template-haskell)
            (hsPkgs.temporary)
            (hsPkgs.text)
            (hsPkgs.th-lift-instances)
            (hsPkgs.time)
            (hsPkgs.transformers)
            (hsPkgs.vector)
            (hsPkgs.vector-binary-instances)
            (hsPkgs.versions)
            (hsPkgs.zip-archive)
            (hsPkgs.zlib)
            ] ++ (pkgs.lib).optional (!(compiler.isGhc && (compiler.version).ge "8.0")) (hsPkgs.semigroups);
          };
        "futhark-dataset" = {
          depends = [
            (hsPkgs.ansi-terminal)
            (hsPkgs.array)
            (hsPkgs.base)
            (hsPkgs.bifunctors)
            (hsPkgs.binary)
            (hsPkgs.blaze-html)
            (hsPkgs.bytestring)
            (hsPkgs.containers)
            (hsPkgs.data-binary-ieee754)
            (hsPkgs.directory)
            (hsPkgs.directory-tree)
            (hsPkgs.dlist)
            (hsPkgs.extra)
            (hsPkgs.file-embed)
            (hsPkgs.filepath)
            (hsPkgs.free)
            (hsPkgs.futhark)
            (hsPkgs.gitrev)
            (hsPkgs.http-client)
            (hsPkgs.http-client-tls)
            (hsPkgs.http-conduit)
            (hsPkgs.json)
            (hsPkgs.language-c-quote)
            (hsPkgs.mainland-pretty)
            (hsPkgs.markdown)
            (hsPkgs.megaparsec)
            (hsPkgs.mtl)
            (hsPkgs.neat-interpolation)
            (hsPkgs.parallel)
            (hsPkgs.parser-combinators)
            (hsPkgs.process)
            (hsPkgs.process-extras)
            (hsPkgs.random)
            (hsPkgs.raw-strings-qq)
            (hsPkgs.regex-tdfa)
            (hsPkgs.srcloc)
            (hsPkgs.template-haskell)
            (hsPkgs.temporary)
            (hsPkgs.text)
            (hsPkgs.th-lift-instances)
            (hsPkgs.time)
            (hsPkgs.transformers)
            (hsPkgs.vector)
            (hsPkgs.vector-binary-instances)
            (hsPkgs.versions)
            (hsPkgs.zip-archive)
            (hsPkgs.zlib)
            ] ++ (pkgs.lib).optional (!(compiler.isGhc && (compiler.version).ge "8.0")) (hsPkgs.semigroups);
          };
        "futhark-doc" = {
          depends = [
            (hsPkgs.ansi-terminal)
            (hsPkgs.array)
            (hsPkgs.base)
            (hsPkgs.bifunctors)
            (hsPkgs.binary)
            (hsPkgs.blaze-html)
            (hsPkgs.bytestring)
            (hsPkgs.containers)
            (hsPkgs.data-binary-ieee754)
            (hsPkgs.directory)
            (hsPkgs.directory-tree)
            (hsPkgs.dlist)
            (hsPkgs.extra)
            (hsPkgs.file-embed)
            (hsPkgs.filepath)
            (hsPkgs.free)
            (hsPkgs.futhark)
            (hsPkgs.gitrev)
            (hsPkgs.http-client)
            (hsPkgs.http-client-tls)
            (hsPkgs.http-conduit)
            (hsPkgs.json)
            (hsPkgs.language-c-quote)
            (hsPkgs.mainland-pretty)
            (hsPkgs.markdown)
            (hsPkgs.megaparsec)
            (hsPkgs.mtl)
            (hsPkgs.neat-interpolation)
            (hsPkgs.parallel)
            (hsPkgs.parser-combinators)
            (hsPkgs.process)
            (hsPkgs.process-extras)
            (hsPkgs.random)
            (hsPkgs.raw-strings-qq)
            (hsPkgs.regex-tdfa)
            (hsPkgs.srcloc)
            (hsPkgs.template-haskell)
            (hsPkgs.temporary)
            (hsPkgs.text)
            (hsPkgs.th-lift-instances)
            (hsPkgs.time)
            (hsPkgs.transformers)
            (hsPkgs.vector)
            (hsPkgs.vector-binary-instances)
            (hsPkgs.versions)
            (hsPkgs.zip-archive)
            (hsPkgs.zlib)
            ] ++ (pkgs.lib).optional (!(compiler.isGhc && (compiler.version).ge "8.0")) (hsPkgs.semigroups);
          };
        "futhark-opencl" = {
          depends = [
            (hsPkgs.ansi-terminal)
            (hsPkgs.array)
            (hsPkgs.base)
            (hsPkgs.bifunctors)
            (hsPkgs.binary)
            (hsPkgs.blaze-html)
            (hsPkgs.bytestring)
            (hsPkgs.containers)
            (hsPkgs.data-binary-ieee754)
            (hsPkgs.directory)
            (hsPkgs.directory-tree)
            (hsPkgs.dlist)
            (hsPkgs.extra)
            (hsPkgs.file-embed)
            (hsPkgs.filepath)
            (hsPkgs.free)
            (hsPkgs.futhark)
            (hsPkgs.gitrev)
            (hsPkgs.http-client)
            (hsPkgs.http-client-tls)
            (hsPkgs.http-conduit)
            (hsPkgs.json)
            (hsPkgs.language-c-quote)
            (hsPkgs.mainland-pretty)
            (hsPkgs.markdown)
            (hsPkgs.megaparsec)
            (hsPkgs.mtl)
            (hsPkgs.neat-interpolation)
            (hsPkgs.parallel)
            (hsPkgs.parser-combinators)
            (hsPkgs.process)
            (hsPkgs.process-extras)
            (hsPkgs.random)
            (hsPkgs.raw-strings-qq)
            (hsPkgs.regex-tdfa)
            (hsPkgs.srcloc)
            (hsPkgs.template-haskell)
            (hsPkgs.temporary)
            (hsPkgs.text)
            (hsPkgs.th-lift-instances)
            (hsPkgs.time)
            (hsPkgs.transformers)
            (hsPkgs.vector)
            (hsPkgs.vector-binary-instances)
            (hsPkgs.versions)
            (hsPkgs.zip-archive)
            (hsPkgs.zlib)
            ] ++ (pkgs.lib).optional (!(compiler.isGhc && (compiler.version).ge "8.0")) (hsPkgs.semigroups);
          };
        "futhark-pkg" = {
          depends = [
            (hsPkgs.ansi-terminal)
            (hsPkgs.array)
            (hsPkgs.base)
            (hsPkgs.bifunctors)
            (hsPkgs.binary)
            (hsPkgs.blaze-html)
            (hsPkgs.bytestring)
            (hsPkgs.containers)
            (hsPkgs.data-binary-ieee754)
            (hsPkgs.directory)
            (hsPkgs.directory-tree)
            (hsPkgs.dlist)
            (hsPkgs.extra)
            (hsPkgs.file-embed)
            (hsPkgs.filepath)
            (hsPkgs.free)
            (hsPkgs.futhark)
            (hsPkgs.gitrev)
            (hsPkgs.http-client)
            (hsPkgs.http-client-tls)
            (hsPkgs.http-conduit)
            (hsPkgs.json)
            (hsPkgs.language-c-quote)
            (hsPkgs.mainland-pretty)
            (hsPkgs.markdown)
            (hsPkgs.megaparsec)
            (hsPkgs.mtl)
            (hsPkgs.neat-interpolation)
            (hsPkgs.parallel)
            (hsPkgs.parser-combinators)
            (hsPkgs.process)
            (hsPkgs.process-extras)
            (hsPkgs.random)
            (hsPkgs.raw-strings-qq)
            (hsPkgs.regex-tdfa)
            (hsPkgs.srcloc)
            (hsPkgs.template-haskell)
            (hsPkgs.temporary)
            (hsPkgs.text)
            (hsPkgs.th-lift-instances)
            (hsPkgs.time)
            (hsPkgs.transformers)
            (hsPkgs.vector)
            (hsPkgs.vector-binary-instances)
            (hsPkgs.versions)
            (hsPkgs.zip-archive)
            (hsPkgs.zlib)
            ] ++ (pkgs.lib).optional (!(compiler.isGhc && (compiler.version).ge "8.0")) (hsPkgs.semigroups);
          };
        "futhark-py" = {
          depends = [
            (hsPkgs.ansi-terminal)
            (hsPkgs.array)
            (hsPkgs.base)
            (hsPkgs.bifunctors)
            (hsPkgs.binary)
            (hsPkgs.blaze-html)
            (hsPkgs.bytestring)
            (hsPkgs.containers)
            (hsPkgs.data-binary-ieee754)
            (hsPkgs.directory)
            (hsPkgs.directory-tree)
            (hsPkgs.dlist)
            (hsPkgs.extra)
            (hsPkgs.file-embed)
            (hsPkgs.filepath)
            (hsPkgs.free)
            (hsPkgs.futhark)
            (hsPkgs.gitrev)
            (hsPkgs.http-client)
            (hsPkgs.http-client-tls)
            (hsPkgs.http-conduit)
            (hsPkgs.json)
            (hsPkgs.language-c-quote)
            (hsPkgs.mainland-pretty)
            (hsPkgs.markdown)
            (hsPkgs.megaparsec)
            (hsPkgs.mtl)
            (hsPkgs.neat-interpolation)
            (hsPkgs.parallel)
            (hsPkgs.parser-combinators)
            (hsPkgs.process)
            (hsPkgs.process-extras)
            (hsPkgs.random)
            (hsPkgs.raw-strings-qq)
            (hsPkgs.regex-tdfa)
            (hsPkgs.srcloc)
            (hsPkgs.template-haskell)
            (hsPkgs.temporary)
            (hsPkgs.text)
            (hsPkgs.th-lift-instances)
            (hsPkgs.time)
            (hsPkgs.transformers)
            (hsPkgs.vector)
            (hsPkgs.vector-binary-instances)
            (hsPkgs.versions)
            (hsPkgs.zip-archive)
            (hsPkgs.zlib)
            ] ++ (pkgs.lib).optional (!(compiler.isGhc && (compiler.version).ge "8.0")) (hsPkgs.semigroups);
          };
        "futhark-pyopencl" = {
          depends = [
            (hsPkgs.ansi-terminal)
            (hsPkgs.array)
            (hsPkgs.base)
            (hsPkgs.bifunctors)
            (hsPkgs.binary)
            (hsPkgs.blaze-html)
            (hsPkgs.bytestring)
            (hsPkgs.containers)
            (hsPkgs.data-binary-ieee754)
            (hsPkgs.directory)
            (hsPkgs.directory-tree)
            (hsPkgs.dlist)
            (hsPkgs.extra)
            (hsPkgs.file-embed)
            (hsPkgs.filepath)
            (hsPkgs.free)
            (hsPkgs.futhark)
            (hsPkgs.gitrev)
            (hsPkgs.http-client)
            (hsPkgs.http-client-tls)
            (hsPkgs.http-conduit)
            (hsPkgs.json)
            (hsPkgs.language-c-quote)
            (hsPkgs.mainland-pretty)
            (hsPkgs.markdown)
            (hsPkgs.megaparsec)
            (hsPkgs.mtl)
            (hsPkgs.neat-interpolation)
            (hsPkgs.parallel)
            (hsPkgs.parser-combinators)
            (hsPkgs.process)
            (hsPkgs.process-extras)
            (hsPkgs.random)
            (hsPkgs.raw-strings-qq)
            (hsPkgs.regex-tdfa)
            (hsPkgs.srcloc)
            (hsPkgs.template-haskell)
            (hsPkgs.temporary)
            (hsPkgs.text)
            (hsPkgs.th-lift-instances)
            (hsPkgs.time)
            (hsPkgs.transformers)
            (hsPkgs.vector)
            (hsPkgs.vector-binary-instances)
            (hsPkgs.versions)
            (hsPkgs.zip-archive)
            (hsPkgs.zlib)
            ] ++ (pkgs.lib).optional (!(compiler.isGhc && (compiler.version).ge "8.0")) (hsPkgs.semigroups);
          };
        "futhark-test" = {
          depends = [
            (hsPkgs.ansi-terminal)
            (hsPkgs.array)
            (hsPkgs.base)
            (hsPkgs.bifunctors)
            (hsPkgs.binary)
            (hsPkgs.blaze-html)
            (hsPkgs.bytestring)
            (hsPkgs.containers)
            (hsPkgs.data-binary-ieee754)
            (hsPkgs.directory)
            (hsPkgs.directory-tree)
            (hsPkgs.dlist)
            (hsPkgs.extra)
            (hsPkgs.file-embed)
            (hsPkgs.filepath)
            (hsPkgs.free)
            (hsPkgs.futhark)
            (hsPkgs.gitrev)
            (hsPkgs.http-client)
            (hsPkgs.http-client-tls)
            (hsPkgs.http-conduit)
            (hsPkgs.json)
            (hsPkgs.language-c-quote)
            (hsPkgs.mainland-pretty)
            (hsPkgs.markdown)
            (hsPkgs.megaparsec)
            (hsPkgs.mtl)
            (hsPkgs.neat-interpolation)
            (hsPkgs.parallel)
            (hsPkgs.parser-combinators)
            (hsPkgs.process)
            (hsPkgs.process-extras)
            (hsPkgs.random)
            (hsPkgs.raw-strings-qq)
            (hsPkgs.regex-tdfa)
            (hsPkgs.srcloc)
            (hsPkgs.template-haskell)
            (hsPkgs.temporary)
            (hsPkgs.text)
            (hsPkgs.th-lift-instances)
            (hsPkgs.time)
            (hsPkgs.transformers)
            (hsPkgs.vector)
            (hsPkgs.vector-binary-instances)
            (hsPkgs.versions)
            (hsPkgs.zip-archive)
            (hsPkgs.zlib)
            ] ++ (pkgs.lib).optional (!(compiler.isGhc && (compiler.version).ge "8.0")) (hsPkgs.semigroups);
          };
        "futharki" = {
          depends = [
            (hsPkgs.ansi-terminal)
            (hsPkgs.array)
            (hsPkgs.base)
            (hsPkgs.bifunctors)
            (hsPkgs.binary)
            (hsPkgs.blaze-html)
            (hsPkgs.bytestring)
            (hsPkgs.containers)
            (hsPkgs.data-binary-ieee754)
            (hsPkgs.directory)
            (hsPkgs.directory-tree)
            (hsPkgs.dlist)
            (hsPkgs.extra)
            (hsPkgs.file-embed)
            (hsPkgs.filepath)
            (hsPkgs.free)
            (hsPkgs.futhark)
            (hsPkgs.gitrev)
            (hsPkgs.haskeline)
            (hsPkgs.http-client)
            (hsPkgs.http-client-tls)
            (hsPkgs.http-conduit)
            (hsPkgs.language-c-quote)
            (hsPkgs.mainland-pretty)
            (hsPkgs.markdown)
            (hsPkgs.megaparsec)
            (hsPkgs.mtl)
            (hsPkgs.neat-interpolation)
            (hsPkgs.parallel)
            (hsPkgs.parser-combinators)
            (hsPkgs.process)
            (hsPkgs.process-extras)
            (hsPkgs.raw-strings-qq)
            (hsPkgs.regex-tdfa)
            (hsPkgs.srcloc)
            (hsPkgs.template-haskell)
            (hsPkgs.text)
            (hsPkgs.th-lift-instances)
            (hsPkgs.time)
            (hsPkgs.transformers)
            (hsPkgs.vector)
            (hsPkgs.vector-binary-instances)
            (hsPkgs.versions)
            (hsPkgs.zip-archive)
            (hsPkgs.zlib)
            ] ++ (pkgs.lib).optional (!(compiler.isGhc && (compiler.version).ge "8.0")) (hsPkgs.semigroups);
          };
        };
      tests = {
        "unit" = {
          depends = [
            (hsPkgs.HUnit)
            (hsPkgs.QuickCheck)
            (hsPkgs.ansi-terminal)
            (hsPkgs.array)
            (hsPkgs.base)
            (hsPkgs.bifunctors)
            (hsPkgs.binary)
            (hsPkgs.blaze-html)
            (hsPkgs.bytestring)
            (hsPkgs.containers)
            (hsPkgs.data-binary-ieee754)
            (hsPkgs.directory)
            (hsPkgs.directory-tree)
            (hsPkgs.dlist)
            (hsPkgs.extra)
            (hsPkgs.file-embed)
            (hsPkgs.filepath)
            (hsPkgs.free)
            (hsPkgs.futhark)
            (hsPkgs.gitrev)
            (hsPkgs.http-client)
            (hsPkgs.http-client-tls)
            (hsPkgs.http-conduit)
            (hsPkgs.language-c-quote)
            (hsPkgs.mainland-pretty)
            (hsPkgs.markdown)
            (hsPkgs.megaparsec)
            (hsPkgs.mtl)
            (hsPkgs.neat-interpolation)
            (hsPkgs.parallel)
            (hsPkgs.parser-combinators)
            (hsPkgs.process)
            (hsPkgs.process-extras)
            (hsPkgs.raw-strings-qq)
            (hsPkgs.regex-tdfa)
            (hsPkgs.srcloc)
            (hsPkgs.tasty)
            (hsPkgs.tasty-hunit)
            (hsPkgs.tasty-quickcheck)
            (hsPkgs.template-haskell)
            (hsPkgs.text)
            (hsPkgs.th-lift-instances)
            (hsPkgs.time)
            (hsPkgs.transformers)
            (hsPkgs.vector)
            (hsPkgs.vector-binary-instances)
            (hsPkgs.versions)
            (hsPkgs.zip-archive)
            (hsPkgs.zlib)
            ] ++ (pkgs.lib).optional (!(compiler.isGhc && (compiler.version).ge "8.0")) (hsPkgs.semigroups);
          };
        };
      };
    }