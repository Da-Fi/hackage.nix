{ system, compiler, flags, pkgs, hsPkgs, pkgconfPkgs, ... }:
  {
    flags = {
      disable-git-info = false;
      hide-dependency-versions = false;
      integration-tests = false;
      static = false;
      supported-build = false;
      };
    package = {
      specVersion = "2.0";
      identifier = { name = "stack"; version = "2.1.3.1"; };
      license = "BSD-3-Clause";
      copyright = "";
      maintainer = "manny@fpcomplete.com";
      author = "Commercial Haskell SIG";
      homepage = "http://haskellstack.org";
      url = "";
      synopsis = "The Haskell Tool Stack";
      description = "Please see the documentation at <https://docs.haskellstack.org>\nfor usage information.\n\nIf building a 'stack' executable for distribution, please download the\nsource code from <https://github.com/commercialhaskell/stack/releases>\nand build it using Stack itself in order to ensure identical behaviour\nto official binaries.  This package on Hackage is provided for convenience\nand bootstrapping purposes.\n\nNote that the API for the library is not currently stable, and may\nchange significantly, even between minor releases. It is\ncurrently only intended for use by the executable.";
      buildType = "Custom";
      setup-depends = [
        (hsPkgs.buildPackages.Cabal or (pkgs.buildPackages.Cabal))
        (hsPkgs.buildPackages.base or (pkgs.buildPackages.base))
        (hsPkgs.buildPackages.filepath or (pkgs.buildPackages.filepath))
        ];
      };
    components = {
      "library" = {
        depends = [
          (hsPkgs.Cabal)
          (hsPkgs.aeson)
          (hsPkgs.annotated-wl-pprint)
          (hsPkgs.ansi-terminal)
          (hsPkgs.array)
          (hsPkgs.async)
          (hsPkgs.attoparsec)
          (hsPkgs.base)
          (hsPkgs.base64-bytestring)
          (hsPkgs.bytestring)
          (hsPkgs.colour)
          (hsPkgs.conduit)
          (hsPkgs.conduit-extra)
          (hsPkgs.containers)
          (hsPkgs.cryptonite)
          (hsPkgs.cryptonite-conduit)
          (hsPkgs.deepseq)
          (hsPkgs.directory)
          (hsPkgs.echo)
          (hsPkgs.exceptions)
          (hsPkgs.extra)
          (hsPkgs.file-embed)
          (hsPkgs.filelock)
          (hsPkgs.filepath)
          (hsPkgs.fsnotify)
          (hsPkgs.generic-deriving)
          (hsPkgs.hackage-security)
          (hsPkgs.hashable)
          (hsPkgs.hi-file-parser)
          (hsPkgs.hpack)
          (hsPkgs.hpc)
          (hsPkgs.http-client)
          (hsPkgs.http-client-tls)
          (hsPkgs.http-conduit)
          (hsPkgs.http-download)
          (hsPkgs.http-types)
          (hsPkgs.memory)
          (hsPkgs.microlens)
          (hsPkgs.mintty)
          (hsPkgs.mono-traversable)
          (hsPkgs.mtl)
          (hsPkgs.mustache)
          (hsPkgs.neat-interpolation)
          (hsPkgs.network-uri)
          (hsPkgs.open-browser)
          (hsPkgs.optparse-applicative)
          (hsPkgs.pantry)
          (hsPkgs.path)
          (hsPkgs.path-io)
          (hsPkgs.persistent)
          (hsPkgs.persistent-sqlite)
          (hsPkgs.persistent-template)
          (hsPkgs.pretty)
          (hsPkgs.primitive)
          (hsPkgs.process)
          (hsPkgs.project-template)
          (hsPkgs.regex-applicative-text)
          (hsPkgs.resource-pool)
          (hsPkgs.resourcet)
          (hsPkgs.retry)
          (hsPkgs.rio)
          (hsPkgs.rio-prettyprint)
          (hsPkgs.semigroups)
          (hsPkgs.split)
          (hsPkgs.stm)
          (hsPkgs.streaming-commons)
          (hsPkgs.tar)
          (hsPkgs.template-haskell)
          (hsPkgs.temporary)
          (hsPkgs.terminal-size)
          (hsPkgs.text)
          (hsPkgs.text-metrics)
          (hsPkgs.th-reify-many)
          (hsPkgs.time)
          (hsPkgs.tls)
          (hsPkgs.transformers)
          (hsPkgs.typed-process)
          (hsPkgs.unicode-transforms)
          (hsPkgs.unix-compat)
          (hsPkgs.unliftio)
          (hsPkgs.unordered-containers)
          (hsPkgs.vector)
          (hsPkgs.yaml)
          (hsPkgs.zip-archive)
          (hsPkgs.zlib)
          ] ++ (if system.isWindows
          then [ (hsPkgs.Win32) ]
          else [ (hsPkgs.unix) ]);
        build-tools = (pkgs.lib).optional (!system.isWindows) (hsPkgs.buildPackages.hsc2hs or (pkgs.buildPackages.hsc2hs));
        };
      exes = {
        "stack" = {
          depends = ([
            (hsPkgs.Cabal)
            (hsPkgs.aeson)
            (hsPkgs.annotated-wl-pprint)
            (hsPkgs.ansi-terminal)
            (hsPkgs.array)
            (hsPkgs.async)
            (hsPkgs.attoparsec)
            (hsPkgs.base)
            (hsPkgs.base64-bytestring)
            (hsPkgs.bytestring)
            (hsPkgs.colour)
            (hsPkgs.conduit)
            (hsPkgs.conduit-extra)
            (hsPkgs.containers)
            (hsPkgs.cryptonite)
            (hsPkgs.cryptonite-conduit)
            (hsPkgs.deepseq)
            (hsPkgs.directory)
            (hsPkgs.echo)
            (hsPkgs.exceptions)
            (hsPkgs.extra)
            (hsPkgs.file-embed)
            (hsPkgs.filelock)
            (hsPkgs.filepath)
            (hsPkgs.fsnotify)
            (hsPkgs.generic-deriving)
            (hsPkgs.hackage-security)
            (hsPkgs.hashable)
            (hsPkgs.hi-file-parser)
            (hsPkgs.hpack)
            (hsPkgs.hpc)
            (hsPkgs.http-client)
            (hsPkgs.http-client-tls)
            (hsPkgs.http-conduit)
            (hsPkgs.http-download)
            (hsPkgs.http-types)
            (hsPkgs.memory)
            (hsPkgs.microlens)
            (hsPkgs.mintty)
            (hsPkgs.mono-traversable)
            (hsPkgs.mtl)
            (hsPkgs.mustache)
            (hsPkgs.neat-interpolation)
            (hsPkgs.network-uri)
            (hsPkgs.open-browser)
            (hsPkgs.optparse-applicative)
            (hsPkgs.pantry)
            (hsPkgs.path)
            (hsPkgs.path-io)
            (hsPkgs.persistent)
            (hsPkgs.persistent-sqlite)
            (hsPkgs.persistent-template)
            (hsPkgs.pretty)
            (hsPkgs.primitive)
            (hsPkgs.process)
            (hsPkgs.project-template)
            (hsPkgs.regex-applicative-text)
            (hsPkgs.resource-pool)
            (hsPkgs.resourcet)
            (hsPkgs.retry)
            (hsPkgs.rio)
            (hsPkgs.rio-prettyprint)
            (hsPkgs.semigroups)
            (hsPkgs.split)
            (hsPkgs.stack)
            (hsPkgs.stm)
            (hsPkgs.streaming-commons)
            (hsPkgs.tar)
            (hsPkgs.template-haskell)
            (hsPkgs.temporary)
            (hsPkgs.terminal-size)
            (hsPkgs.text)
            (hsPkgs.text-metrics)
            (hsPkgs.th-reify-many)
            (hsPkgs.time)
            (hsPkgs.tls)
            (hsPkgs.transformers)
            (hsPkgs.typed-process)
            (hsPkgs.unicode-transforms)
            (hsPkgs.unix-compat)
            (hsPkgs.unliftio)
            (hsPkgs.unordered-containers)
            (hsPkgs.vector)
            (hsPkgs.yaml)
            (hsPkgs.zip-archive)
            (hsPkgs.zlib)
            ] ++ (if system.isWindows
            then [ (hsPkgs.Win32) ]
            else [
              (hsPkgs.unix)
              ])) ++ (pkgs.lib).optionals (!flags.disable-git-info) [
            (hsPkgs.githash)
            (hsPkgs.optparse-simple)
            ];
          build-tools = (pkgs.lib).optional (!system.isWindows) (hsPkgs.buildPackages.hsc2hs or (pkgs.buildPackages.hsc2hs));
          };
        "stack-integration-test" = {
          depends = [
            (hsPkgs.Cabal)
            (hsPkgs.aeson)
            (hsPkgs.annotated-wl-pprint)
            (hsPkgs.ansi-terminal)
            (hsPkgs.array)
            (hsPkgs.async)
            (hsPkgs.attoparsec)
            (hsPkgs.base)
            (hsPkgs.base64-bytestring)
            (hsPkgs.bytestring)
            (hsPkgs.colour)
            (hsPkgs.conduit)
            (hsPkgs.conduit-extra)
            (hsPkgs.containers)
            (hsPkgs.cryptonite)
            (hsPkgs.cryptonite-conduit)
            (hsPkgs.deepseq)
            (hsPkgs.directory)
            (hsPkgs.echo)
            (hsPkgs.exceptions)
            (hsPkgs.extra)
            (hsPkgs.file-embed)
            (hsPkgs.filelock)
            (hsPkgs.filepath)
            (hsPkgs.fsnotify)
            (hsPkgs.generic-deriving)
            (hsPkgs.hackage-security)
            (hsPkgs.hashable)
            (hsPkgs.hi-file-parser)
            (hsPkgs.hpack)
            (hsPkgs.hpc)
            (hsPkgs.hspec)
            (hsPkgs.http-client)
            (hsPkgs.http-client-tls)
            (hsPkgs.http-conduit)
            (hsPkgs.http-download)
            (hsPkgs.http-types)
            (hsPkgs.memory)
            (hsPkgs.microlens)
            (hsPkgs.mintty)
            (hsPkgs.mono-traversable)
            (hsPkgs.mtl)
            (hsPkgs.mustache)
            (hsPkgs.neat-interpolation)
            (hsPkgs.network-uri)
            (hsPkgs.open-browser)
            (hsPkgs.optparse-applicative)
            (hsPkgs.optparse-generic)
            (hsPkgs.pantry)
            (hsPkgs.path)
            (hsPkgs.path-io)
            (hsPkgs.persistent)
            (hsPkgs.persistent-sqlite)
            (hsPkgs.persistent-template)
            (hsPkgs.pretty)
            (hsPkgs.primitive)
            (hsPkgs.process)
            (hsPkgs.project-template)
            (hsPkgs.regex-applicative-text)
            (hsPkgs.resource-pool)
            (hsPkgs.resourcet)
            (hsPkgs.retry)
            (hsPkgs.rio)
            (hsPkgs.rio-prettyprint)
            (hsPkgs.semigroups)
            (hsPkgs.split)
            (hsPkgs.stm)
            (hsPkgs.streaming-commons)
            (hsPkgs.tar)
            (hsPkgs.template-haskell)
            (hsPkgs.temporary)
            (hsPkgs.terminal-size)
            (hsPkgs.text)
            (hsPkgs.text-metrics)
            (hsPkgs.th-reify-many)
            (hsPkgs.time)
            (hsPkgs.tls)
            (hsPkgs.transformers)
            (hsPkgs.typed-process)
            (hsPkgs.unicode-transforms)
            (hsPkgs.unix-compat)
            (hsPkgs.unliftio)
            (hsPkgs.unordered-containers)
            (hsPkgs.vector)
            (hsPkgs.yaml)
            (hsPkgs.zip-archive)
            (hsPkgs.zlib)
            ] ++ (if system.isWindows
            then [ (hsPkgs.Win32) ]
            else [ (hsPkgs.unix) ]);
          build-tools = (pkgs.lib).optional (!system.isWindows) (hsPkgs.buildPackages.hsc2hs or (pkgs.buildPackages.hsc2hs));
          };
        };
      tests = {
        "stack-test" = {
          depends = [
            (hsPkgs.Cabal)
            (hsPkgs.QuickCheck)
            (hsPkgs.aeson)
            (hsPkgs.annotated-wl-pprint)
            (hsPkgs.ansi-terminal)
            (hsPkgs.array)
            (hsPkgs.async)
            (hsPkgs.attoparsec)
            (hsPkgs.base)
            (hsPkgs.base64-bytestring)
            (hsPkgs.bytestring)
            (hsPkgs.colour)
            (hsPkgs.conduit)
            (hsPkgs.conduit-extra)
            (hsPkgs.containers)
            (hsPkgs.cryptonite)
            (hsPkgs.cryptonite-conduit)
            (hsPkgs.deepseq)
            (hsPkgs.directory)
            (hsPkgs.echo)
            (hsPkgs.exceptions)
            (hsPkgs.extra)
            (hsPkgs.file-embed)
            (hsPkgs.filelock)
            (hsPkgs.filepath)
            (hsPkgs.fsnotify)
            (hsPkgs.generic-deriving)
            (hsPkgs.hackage-security)
            (hsPkgs.hashable)
            (hsPkgs.hi-file-parser)
            (hsPkgs.hpack)
            (hsPkgs.hpc)
            (hsPkgs.hspec)
            (hsPkgs.http-client)
            (hsPkgs.http-client-tls)
            (hsPkgs.http-conduit)
            (hsPkgs.http-download)
            (hsPkgs.http-types)
            (hsPkgs.memory)
            (hsPkgs.microlens)
            (hsPkgs.mintty)
            (hsPkgs.mono-traversable)
            (hsPkgs.mtl)
            (hsPkgs.mustache)
            (hsPkgs.neat-interpolation)
            (hsPkgs.network-uri)
            (hsPkgs.open-browser)
            (hsPkgs.optparse-applicative)
            (hsPkgs.pantry)
            (hsPkgs.path)
            (hsPkgs.path-io)
            (hsPkgs.persistent)
            (hsPkgs.persistent-sqlite)
            (hsPkgs.persistent-template)
            (hsPkgs.pretty)
            (hsPkgs.primitive)
            (hsPkgs.process)
            (hsPkgs.project-template)
            (hsPkgs.raw-strings-qq)
            (hsPkgs.regex-applicative-text)
            (hsPkgs.resource-pool)
            (hsPkgs.resourcet)
            (hsPkgs.retry)
            (hsPkgs.rio)
            (hsPkgs.rio-prettyprint)
            (hsPkgs.semigroups)
            (hsPkgs.smallcheck)
            (hsPkgs.split)
            (hsPkgs.stack)
            (hsPkgs.stm)
            (hsPkgs.streaming-commons)
            (hsPkgs.tar)
            (hsPkgs.template-haskell)
            (hsPkgs.temporary)
            (hsPkgs.terminal-size)
            (hsPkgs.text)
            (hsPkgs.text-metrics)
            (hsPkgs.th-reify-many)
            (hsPkgs.time)
            (hsPkgs.tls)
            (hsPkgs.transformers)
            (hsPkgs.typed-process)
            (hsPkgs.unicode-transforms)
            (hsPkgs.unix-compat)
            (hsPkgs.unliftio)
            (hsPkgs.unordered-containers)
            (hsPkgs.vector)
            (hsPkgs.yaml)
            (hsPkgs.zip-archive)
            (hsPkgs.zlib)
            ] ++ (if system.isWindows
            then [ (hsPkgs.Win32) ]
            else [ (hsPkgs.unix) ]);
          build-tools = (pkgs.lib).optional (!system.isWindows) (hsPkgs.buildPackages.hsc2hs or (pkgs.buildPackages.hsc2hs));
          };
        };
      };
    }